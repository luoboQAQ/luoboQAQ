<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on luoboQAQ</title>
    <link>https://lbqaq.top/tags/java/</link>
    <description>Recent content in Java on luoboQAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Jan 2022 19:52:31 +0800</lastBuildDate><atom:link href="https://lbqaq.top/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWeb期末复习</title>
      <link>https://lbqaq.top/p/javawebexam/</link>
      <pubDate>Mon, 03 Jan 2022 19:52:31 +0800</pubDate>
      
      <guid>https://lbqaq.top/p/javawebexam/</guid>
      <description>题目类型  选择（10分） 10题 填空（10分） 10题 问答（30分） 4题 编程题（30分） 3-4题 综合题（20分）  上机题整理 这里只存放核心的代码，完整的程序见Gitee仓库
使用Maven 通过使用Maven可以让程序自动配置和导入包，不必自己手动配置和导入，非常方便，推荐大家使用。
我的配置文件已经把考试会用的包都导入了，包括Servlet、JSP、JSTL、MySQl驱动，版本都已经调整为最佳，保证开箱即用。
  新建项目，选择Maven，直接下一步
 step1 
  填写项目名称和目录位置，其他的可填可不填
 step2 
  在pom.xml文件增加这样一句&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
接着粘贴下面的代码，并点击右上角的图标应用（或者使用快捷键Ctrl+Shift+O）
&amp;lt;dependencies&amp;gt; &amp;lt;!-- servlet 依赖 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- jsp 依赖 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet.jsp-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- jstl --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet.jsp.jstl&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jstl-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- standard标签库 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;taglibs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;standard&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- mysql驱动 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.</description>
    </item>
    
    <item>
      <title>Swagger3初体验</title>
      <link>https://lbqaq.top/p/swagger/</link>
      <pubDate>Thu, 09 Sep 2021 15:09:04 +0800</pubDate>
      
      <guid>https://lbqaq.top/p/swagger/</guid>
      <description>最近做项目需要前后端分离，所以需要接口文档给前端方便联调。手写文档是不可能的，这时就需要使用Swagger了。网上的教程大部分版本都在2.x甚至是1.x，很少有3.0的教程，我个人就是喜欢用最新版，所以我就来分享一下我使用Swagger3的体验和坑吧。
配置 这里就分享springboot版本的方法了，现在的项目应该都用springboot创建了吧。
  导入Maven依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   在启动类上加上@EnableOpenApi就行了。
  当然，这样只是默认的，我们要用肯定要配置一下，我们去创建一个Config类，在里面建立一个函数返回Docket类，我们所有的配置就在这个Docket类里配置。
@Configuration @EnableOpenApi public class SwaggerConfig { @Bean public Docket docket(){ return new Docket(DocumentationType.OAS_30)	//3.0版本用OAS_30这个标准  .apiInfo(getApiInfo()) .select() //扫描指定包下的接口  .apis(RequestHandlerSelectors.basePackage(&amp;#34;top.lbqaq.controller&amp;#34;)) .build(); } /** * 配置swagger信息 */ private ApiInfo getApiInfo(){ //这里是作者信息，分别为姓名、个人主页、邮箱  Contact contact = new Contact(&amp;#34;luoboQAQ&amp;#34;,&amp;#34;https://lbqaq.top&amp;#34;,&amp;#34;123@xx.com&amp;#34;); return new ApiInfo( &amp;#34;项目名&amp;#34;, &amp;#34;项目描述&amp;#34;, &amp;#34;版本&amp;#34;, &amp;#34;项目主页&amp;#34;, contact, &amp;#34;Apache 2.0&amp;#34;, &amp;#34;https://www.apache.org/licenses/LICENSE-2.0&amp;#34;, new ArrayList()); } } 这样一个带有个人信息的配置页就做好了。
注解 首先是2.</description>
    </item>
    
    <item>
      <title>SpringMVC学习笔记</title>
      <link>https://lbqaq.top/p/springmvc/</link>
      <pubDate>Sun, 15 Aug 2021 09:06:00 +0800</pubDate>
      
      <guid>https://lbqaq.top/p/springmvc/</guid>
      <description>SpringMVC也告一段落了，终于要到SpringBoot了。
还是和之前一样，笔记是基于遇见狂神说的SpringMVC视频教程而来，在此感谢能提供这么优秀的教程。
回顾MVC 什么是MVC  MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。 将业务逻辑、数据、显示分离的方法来组织代码。  **Model（模型）：**数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。
拓展：在前端数据传输给后端时，有些字段是不需要的，这是可能会细分出Vo层（视图）
比如：用户有账号、密码、年龄等一系列字段
这时前端登录只传了账号密码
此时可以用UserVo来表示，里面只有账号和密码
**View（视图）：**负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。
**Controller（控制器）：**接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。
最典型的MVC就是JSP + servlet + javabean的模式。
 用户发请求 Servlet接收请求数据，并调用对应的业务逻辑方法 业务处理完毕，返回更新后的数据给servlet servlet转向到JSP，由JSP来渲染页面 响应给前端更新后的页面  职责分析：
Controller：控制器
 取得表单数据 调用业务逻辑 转向指定的页面  Model：模型
 业务逻辑 保存数据的状态  View：视图
 显示页面  复习Servlet   父工程添加依赖
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.13&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.3.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsp-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>Spring学习笔记</title>
      <link>https://lbqaq.top/p/spring/</link>
      <pubDate>Thu, 12 Aug 2021 09:38:02 +0800</pubDate>
      
      <guid>https://lbqaq.top/p/spring/</guid>
      <description>花了3天时间，Spring也终于看完了,SSM已经干完了两个了，感觉人都要没了😇。还是老样子，留下笔记以免遗忘。
下面的内容都是基于遇见狂神说的Spring5视频教程而来，在此感谢能提供这么优秀的教程。
Spring 简介 Spring就是用来简化Java开发的，只能说学Java不学Spring，就像读四大名著不读红楼梦&amp;hellip;&amp;hellip;
2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。
2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。
很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。
Spring理念 : 使现有技术更加实用。 本身就是一个大杂烩 , 整合现有的框架技术。
SSM：SpringMVC+Spring+MyBatis
几个常用的网址：
  官网
  官方文档（英文）
  中文文档
  GitHub
  &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.3.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.3.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 优点   Spring是一个开源免费的框架 , 容器
  Spring是一个轻量级的框架 , 非侵入式的
  控制反转（IoC）,面向切面（Aop）
  对事务的支持 , 对框架的支持
  一句话概括：</description>
    </item>
    
    <item>
      <title>MyBatis学习笔记</title>
      <link>https://lbqaq.top/p/mybatis/</link>
      <pubDate>Wed, 11 Aug 2021 11:11:10 +0800</pubDate>
      
      <guid>https://lbqaq.top/p/mybatis/</guid>
      <description>花了四天的时间，终于把MyBatis的视频教程全部看完了，为了以后不要那么快的遗忘掉，还是来写一下笔记比较好。
下面的内容都是基于遇见狂神说的MyBatis视频教程而来，在此感谢能提供这么优秀的教程。
简介  MyBatis的作用用我自己的话说，就是不用自己手动搞JDBC了，省事，行！ MyBatis作用于持久层——DAO层 【DAO (Data Access Object) 数据访问对象】，通俗点说就是用来操作数据库的层 选择MyBatis的最大原因还是用的人多，为后面的Spring打基础_(:з)∠)_  第一个MyBatis程序 思路流程：搭建环境&amp;ndash;&amp;gt;导入MyBatis&amp;mdash;&amp;gt;编写代码&amp;mdash;&amp;gt;测试
具体代码   创建Maven项目
  引入依赖包
&amp;lt;!-- 导入依赖 --&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- mysql驱动 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.25&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- mybatis --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- junit --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;   在resources目录下创建mybatis-config.xml，作为MyBatis的配置文件
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;!--核心配置文件--&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;environments default=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;environment id=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;transactionManager type=&amp;#34;JDBC&amp;#34;/&amp;gt; &amp;lt;dataSource type=&amp;#34;POOLED&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driver&amp;#34; value=&amp;#34;com.</description>
    </item>
    
  </channel>
</rss>
