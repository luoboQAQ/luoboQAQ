<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on luoboQAQ</title>
    <link>https://luobo.cf/tags/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on luoboQAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Aug 2021 21:46:24 +0800</lastBuildDate><atom:link href="https://luobo.cf/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零开始ASF挂卡</title>
      <link>https://luobo.cf/p/asf/</link>
      <pubDate>Wed, 11 Aug 2021 21:46:24 +0800</pubDate>
      
      <guid>https://luobo.cf/p/asf/</guid>
      <description>因为买了一台云服务器，不拿来干点啥实在是太亏了，于是便想到了可以使用云服务器来挂卡。
步骤 安装.net环境 ASF是基于.netcore开发的程序，所以需要安装环境。这里建议看微软官方的安装文档，里面有不同系统的安装方法。
我们需要安装的只是ASP.NET Core 运行时。
我的系统是centos7，这里就只列举我系统上的命令了。
sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm sudo yum install aspnetcore-runtime-5.0 安装ASF 在ASF的发布页面上下载系统对应的版本解压即可。
我这里是在本地先下载好后用WinSCP直接传上服务器。
配置ASF 这里就采用官方的**在线配置文件生成器**自动生成即可。
我们这里选择机器人，将steam的账号和密码填入，并将Enabled设置为True就行了。
详细的配置内容可以在官方Wiki上看到，这里就不再赘述了。
下面放上我的配置文件：
{ &amp;#34;SteamLogin&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;SteamPassword&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;Enabled&amp;#34;: true, &amp;#34;CustomGamePlayedWhileFarming&amp;#34;: &amp;#34;挂卡中...&amp;#34;, &amp;#34;CustomGamePlayedWhileIdle&amp;#34;: &amp;#34;空闲中...&amp;#34;, &amp;#34;FarmingOrders&amp;#34;: [ 15, 12 ], &amp;#34;HoursUntilCardDrops&amp;#34;: 0, &amp;#34;OnlineStatus&amp;#34;: 1 }  CustomGamePlayedWhileFarming：表示挂卡时显示的游戏名 CustomGamePlayedWhileIdle：表示空闲时显示的游戏名 HoursUntilCardDrops：表示至少将游戏挂到几小时，如果是非限制账户，调到0是最好的。  我们也可以配置ASF本身的设置，这里也同样贴上我的配置：
{ &amp;#34;s_SteamOwnerID&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;CurrentCulture&amp;#34;: &amp;#34;zh-CN&amp;#34;, &amp;#34;IPCPassword&amp;#34;: &amp;#34;xxx&amp;#34; }  s_SteamOwnerID：该属性定义 ASF 进程所有者的 64 位 Steam ID，直接设置成自己的大号就行 CurrentCulture：ASF的语言 IPCPassword：由于ASF默认会开启IPC服务，为了安全起见建议设置密码或关闭IPC服务。  将配置文件放入config目录里就行了。</description>
    </item>
    
    <item>
      <title>Qt构建qsqlmysql.dll</title>
      <link>https://luobo.cf/p/qt%E6%9E%84%E5%BB%BAqsqlmysql.dll/</link>
      <pubDate>Thu, 03 Jun 2021 15:44:17 +0800</pubDate>
      
      <guid>https://luobo.cf/p/qt%E6%9E%84%E5%BB%BAqsqlmysql.dll/</guid>
      <description>这篇文章我打算来介绍一下如何构建qsqlmysql.dll，由于版权原因，在新版的Qt里是不自带该dll的，这样对我们编写数据库程序会很麻烦。（你用ODBC？那没事了）
我在网上也查了很多资料，但根据步骤来总是会报错，提示没有mysql.h这个头文件。下面就记录一下我成功编译的过程。
基于cmake的步骤 在6.1之后的Qt版本中，Qt公司删除了qmake而更换成了cmake的方式来构建项目文件，下面就是我总结的使用cmake生成的方法。
注意： 路径的前段部分(软件的安装位置)每个人可能都不一样，但是路径的后段部分应该是一样的，请自行修改。
1.准备好Qt的源代码，如果没有可以在Qt的安装目录打开MaintenanceTool.exe启动Qt组件管理，在里面勾选Src把源码下载下来。
2.打开cmake-gui，选择目标文件夹为D:\Qt\6.1.1\Src\qtbase\src\plugins\sqldrivers，并设置生成文件夹为D:/Qt/6.1.1/Src/qtbase/src/plugins/sqldrivers/build
 配置文件夹 
3.点击左下角的Configure，会提示生成的目录不存在是否创建，直接点是就可以了。
4.编译器这里选择MinGW Makefiles,然后点击Finish
 选择编译器 
5.等待生成完成后，把FEATURE_sql_mysql后面的勾勾上，然后把其余的FEATURE_sql后面的勾取消。
 选择生成模块 
6.再次点击左下角的Configure，可以发现上面的红框已经消失了，说明配置成功了。然后点击Generate，生成Makefiles。
 配置成功 
7.这时配置文件已经构建完成了，接下来就是生成dll了，打开PowerShell切换目录至D:/Qt/6.1.1/Src/qtbase/src/plugins/sqldrivers/build，输入mingw32-make开始编译生成dll。
 编译成功 
没有报错，说明生成成功。
8.最后打开目录D:\Qt\6.1.1\Src\qtbase\src\plugins\sqldrivers\build\plugins\sqldrivers，就可以看到生成好的qsqlmysql.dll了。
基于qmake的步骤 注意： 路径的前段部分(软件的安装位置)每个人可能都不一样，但是路径的后段部分应该是一样的，请自行修改。
1.准备好Qt的源代码，如果没有可以在Qt的安装目录打开MaintenanceTool.exe启动Qt组件管理，在里面勾选Src把源码下载下来。
2.进入D:\Qt\6.0.3\Src\qtbase\src\plugins\sqldrivers目录下，打开sqldrivers.pro这个文件。
3.在左侧文件树中打开mysql文件夹，选择mysql.pro打开。
4.修改里面的内容：
  注释掉QMAKE_USE += mysql这一句
  增加下面三行代码(注意把D:/MySQL/改为你MySQL的安装路径)：
LIBS +=-LD:/MySQL/lib -llibmysql INCLUDEPATH += D:/MySQL/include DEPENDPATH += D:/MySQL/include   5.点击Qt左下角的小锤子进行构建，不出意外的话就可以在D:\Qt\6.0.3\Src\qtbase\src\plugins这个路径下看到build开头的文件夹，在.\plugins\sqldrivers目录下就能看到编译好的dll了。
6.最后将qsqlmysql.dll放入D:\Qt\6.0.3\mingw81_64\plugins\sqldrivers\里就行了。如果链接数据库时还报错，就把libmysql.dll复制到Qt的编译器的D:\Qt\6.0.3\mingw81_64\bin\目录。</description>
    </item>
    
    <item>
      <title>WSL2&#43;WT配置小结</title>
      <link>https://luobo.cf/p/wsl2-wt%E9%85%8D%E7%BD%AE%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 08 Apr 2021 13:14:20 +0800</pubDate>
      
      <guid>https://luobo.cf/p/wsl2-wt%E9%85%8D%E7%BD%AE%E5%B0%8F%E7%BB%93/</guid>
      <description>1202年了，是时候抛弃老旧的cmd窗口和臃肿的VM虚拟机了，来试试巨硬推出的WSL2+Windows Terminal(～￣▽￣)～。
起因 在知乎上刷到了一篇回答，是关于Windows编程的体验的。在这篇文章中提到了WSL2和Windows Terminal，我一下就被那精美的界面吸引了（管他好不好用，好看就完事了）。正好现在在上操作系统这门课，需要使用Linux进行实验，这还说什么，直接开冲。
 精美的界面 
WSL2安装 安装其实很简单，按照微软的教程一步一步做就完事了。
0.前置条件 想要用WSL2，首先你得是 Windows 10，而且还有版本号要求。
 对于 x64 系统：版本 1903 或更高版本，采用 内部版本 18362 或更高版本。 对于 ARM64 系统：版本 2004 或更高版本，采用 内部版本 19041 或更高版本。  1. 开启WSL服务 在Powershell(管理员)中输入下面的命令：
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 2. 启用虚拟机服务 在Powershell(管理员)中输入下面的命令：
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重新启动 计算机，以完成 WSL 安装并更新到 WSL 2。
3. 下载 Linux 内核更新包 下载最新包并安装：
 适用于 x64 计算机的 WSL2 Linux 内核更新包  4. 将 WSL 2 设置为默认版本 在Powershell中输入下面的命令：</description>
    </item>
    
  </channel>
</rss>
